{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/sqlite-flutter/","result":{"data":{"site":{"siteMetadata":{"author":{"name":"AKAI","contacts":{"twitter":"akai_pp"}},"disqusShortname":"","subtitle":"Akademickie Koło Aplikacji Internetowych Politechniki Poznańskiej","title":"AKAI","url":"https://akai.org.pl"}},"markdownRemark":{"id":"3a0439b4-9863-5784-82f0-f79ab018e6e1","html":"<p>W tym poradniku przedstawiam, jak napisać prostą aplikację do dodawania i usuwania studentów za pomocą interfejsu użytkownika w bazie danych. </p>\n<hr>\n<p>💡 Zanim przeczytasz upewnij się, że: </p>\n<ul>\n<li>🔗 Posiadasz zainstalowany <a href=\"https://flutter.dev/docs/get-started/install\">flutter</a>,</li>\n<li>🔗 Posiadasz skonfigurowane <a href=\"https://flutter.dev/docs/get-started/editor\">IDE</a> </li>\n<li>🔗 Zapoznałeś się ze składnią języka <a href=\"https://learnxinyminutes.com/docs/dart/\">Dart</a></li>\n<li>🔗 Wykonałeś  <a href=\"https://flutter.dev/docs/get-started/codelab\">pierwsze kroki</a> we flutterze</li>\n</ul>\n<p>☕ Jeżeli wszystko ogarnięte to kawusia w dłoń i lecimy.</p>\n<h2 id=\"czym-jest-flutter-i-sqlite\"><a href=\"#czym-jest-flutter-i-sqlite\" aria-label=\"czym jest flutter i sqlite permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📚Czym jest flutter i SQLite</h2>\n<p><strong><em>Flutter</em></strong> to framework służący do tworzenia aplikacji wieloplatformowych. Pozwala nam na napisanie kodu, który działa równocześnie na platformach Android, iOS, Linux, Windows i MacOS. Flutter to projekt opensource stworzony przez Googla, więc możemy być pewni, że framework będzie wspierany jeszcze przez wiele lat. </p>\n<p><strong><em>SQLite</em></strong> to biblioteka C implementująca silnik bazy danych SQL. Została ona bardzo dobrze przetestowana co świadczy o jej niezawodności. Całość mieści się w pojedynczym pliku systemowym, a jego format jest wieloplatformowy. SQLite wypada bardzo dobrze w testach wydajności przy obsłudze jednego użytkownika. To wszystko sprawia, że SQLite sprawdza się świetnie w świecie mobile.</p>\n<hr>\n<h3 id=\"️-krok-1-dependencies\"><a href=\"#%EF%B8%8F-krok-1-dependencies\" aria-label=\"️ krok 1 dependencies permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⚙️ Krok 1. Dependencies</h3>\n<p>Stwórzmy nowy projekt, do którego dodamy dwie nowe zależności.</p>\n<ul>\n<li><strong><em><a href=\"https://pub.dev/packages/sqflite\">sqflite</a></em></strong> to pakiet udostępniający nam klasy oraz funkcje do obsługi bazy danych SQLite</li>\n<li><strong><em><a href=\"https://pub.dev/packages/path_provider\">path_provider</a></em></strong> to pakiet udostępniający funkcje do lokalizowania bazy danych na dysku</li>\n</ul>\n<p>Do pliku <code class=\"language-text\">pubspec.yaml</code> dopisz najnowsze wersje tych pakietów. Nie zapomnij zaktualizować zależności.</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">dependencies<span class=\"token punctuation\">:</span>  \n  flutter<span class=\"token punctuation\">:</span>  \n    sdk<span class=\"token punctuation\">:</span> flutter  \n  sqflite<span class=\"token punctuation\">:</span> <span class=\"token operator\">^</span><span class=\"token number\">1.3</span><span class=\"token number\">.0</span>  \n  path_provider<span class=\"token punctuation\">:</span> <span class=\"token operator\">^</span><span class=\"token number\">1.6</span><span class=\"token number\">.22</span></code></pre></div>\n<hr>\n<h3 id=\"-krok-2-przygotowanie-struktury-projektu\"><a href=\"#-krok-2-przygotowanie-struktury-projektu\" aria-label=\" krok 2 przygotowanie struktury projektu permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳 Krok 2. Przygotowanie struktury projektu</h3>\n<p>Usuńmy folder <code class=\"language-text\">test</code>, nie będzie on nam potrzebny. </p>\n<p>W folderze <code class=\"language-text\">lib</code> stwórzmy folder <code class=\"language-text\">database</code> w którym będziemy trzymać całą logikę bazy danych naszej aplikacji. Stwórzmy w tym folderze plik <code class=\"language-text\">database.dart</code> w którym obsłużymy naszą bazę.</p>\n<p>W folderze <code class=\"language-text\">database</code> stwórzmy folder <code class=\"language-text\">models</code>  (będziemy tu przechowywać klasy, które reprezentują model danych w bazie). Dodajmy do niego nowy plik <code class=\"language-text\">StudentModel.dart</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">+ --- + lib/\n      |   main.dart\n      |\n      + --- + database/\n            |   database.dart\n            |\n            + --- models/\n                    StudentModel.dart</code></pre></div>\n<p>Gdy mamy przygotowaną strukturę, pora zabrać się za kodzenie 🧑‍💻. </p>\n<hr>\n<h3 id=\"-krok-3-model-class\"><a href=\"#-krok-3-model-class\" aria-label=\" krok 3 model class permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📐 Krok 3. Model Class</h3>\n<p>Aby zapewnić spójną komunikację między bazą danych a naszą aplikacją musimy zadbać o odpowiednie przechowywanie spójnego modelu danych. Posłuży nam do tego klasa <code class=\"language-text\">Student</code>.\n<code class=\"language-text\">Student</code> będzie posiadał 4 pola. Typy danych będą różne dla języka Dart i SQL.  Pole <code class=\"language-text\">id</code> będzie  kluczem głównym.</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Pole klasy</th>\n<th align=\"right\">Dart</th>\n<th align=\"right\">SQLite</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">🗝️ id</td>\n<td align=\"right\">int</td>\n<td align=\"right\">INT</td>\n</tr>\n<tr>\n<td align=\"right\">firstName</td>\n<td align=\"right\">String</td>\n<td align=\"right\">TEXT</td>\n</tr>\n<tr>\n<td align=\"right\">lastName</td>\n<td align=\"right\">String</td>\n<td align=\"right\">TEXT</td>\n</tr>\n<tr>\n<td align=\"right\">grade</td>\n<td align=\"right\">int</td>\n<td align=\"right\">INT</td>\n</tr>\n</tbody>\n</table>\n<p>🔗 <a href=\"https://www.sqlite.org/datatype3.html\">Typy danych SQLite</a></p>\n<p>Implementacja wygląda następująco. Pola posiadają typ <code class=\"language-text\">final</code>, ponieważ chcemy aby pierwsza przypisana do nich wartość była stała. Konstruktor domyślny z listą inicjalizacyjną. </p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">final</span> int id<span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">final</span> String firstName<span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">final</span> String lastName<span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">final</span> int grade<span class=\"token punctuation\">;</span>  \n  \n  <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">,</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">,</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade  \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To nie koniec. SQLite z naszą aplikacją wymienia się danymi w postaci <a href=\"https://www.tutorialspoint.com/dart_programming/dart_programming_map.htm\">Mapy</a>. Aby sprawnie przechodzić z instancji klasy na mapę i odwrotnie należy zaimplementować odpowiednie do tego metody.\nZmapujemy ciąg znaków na dynamiczny typ danych, ponieważ posiadamy różne rodzaje danych w modelu <code class=\"language-text\">Map&lt;String, dynamic&gt;</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>  \n\n<span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">factory</span> Student<span class=\"token punctuation\">.</span><span class=\"token function\">fromMap</span><span class=\"token punctuation\">(</span>  \n    Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">dynamic</span><span class=\"token operator\">></span> map<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>  \n      id<span class=\"token punctuation\">:</span> map<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  \n      firstName<span class=\"token punctuation\">:</span> map<span class=\"token punctuation\">[</span><span class=\"token string\">\"first_name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  \n      lastName<span class=\"token punctuation\">:</span> map<span class=\"token punctuation\">[</span><span class=\"token string\">\"last_name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  \n      grade<span class=\"token punctuation\">:</span> map<span class=\"token punctuation\">[</span><span class=\"token string\">\"grade\"</span><span class=\"token punctuation\">]</span>  \n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n  Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">dynamic</span><span class=\"token operator\">></span> <span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">,</span>  \n    <span class=\"token string\">\"first_name\"</span><span class=\"token punctuation\">:</span> firstName<span class=\"token punctuation\">,</span>  \n    <span class=\"token string\">\"last_name\"</span><span class=\"token punctuation\">:</span> lastName<span class=\"token punctuation\">,</span>  \n    <span class=\"token string\">\"grade\"</span><span class=\"token punctuation\">:</span> grade  \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Zauważ, że konstruktor klasy Student <code class=\"language-text\">fromMap</code> posiada słowo kluczowe <code class=\"language-text\">factory</code> (tak zwany <em>factory constructor</em>) dzięki któremu możemy obsłużyć logikę tworzenia instancji, której nie jest w stanie obsłużyć lista inicjalizacyjna. </p>\n<p>🔗 Więcej o <em>factory consturctor</em> na <a href=\"https://dart.dev/guides/language/language-tour#factory-constructors\">dart.dev</a> oraz <a href=\"https://stackoverflow.com/questions/53886304/understanding-factory-constructor-code-example-dart\">stackoverflow</a>.</p>\n<hr>\n<h3 id=\"-krok-4-databaseprovider\"><a href=\"#-krok-4-databaseprovider\" aria-label=\" krok 4 databaseprovider permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📊 Krok 4. DatabaseProvider</h3>\n<p>Pora zadbać o inicjalizację naszej bazy danych. Skorzystamy z wzorca <a href=\"https://refactoring.guru/pl/design-patterns/singleton\">Singleton</a> dzięki któremu obiekt <code class=\"language-text\">DatabaseProvider</code>  będzie jedynym tego rodzaju obiektem w naszej aplikacji. Taką logikę uzyskujemy za pomocą pola <code class=\"language-text\">static</code> instancji klasy oraz  prywatnego konstruktora. Dzięki temu instancja istnieje cały czas, a prywatny konstruktor uniemożliwia stworzenia kolejnego obiektu z zewnątrz. </p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DatabaseProvider</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token comment\">// private constructor  </span>\n  DatabaseProvider<span class=\"token punctuation\">.</span><span class=\"token function\">internal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n  <span class=\"token comment\">// static instance  </span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> DatabaseProvider db <span class=\"token operator\">=</span> DatabaseProvider<span class=\"token punctuation\">.</span><span class=\"token function\">internal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n  <span class=\"token comment\">// SQLite database  </span>\n  Database _database<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Teraz potrzebujemy funkcji, która będzie zwracała nam połączenie z bazą danych lub tworzyła je, jeżeli jeszcze nie zostało ustanowione. </p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DatabaseProvider</span> <span class=\"token punctuation\">{</span> \n \n<span class=\"token comment\">// ...</span>\n\n  Future<span class=\"token operator\">&lt;</span>Database<span class=\"token operator\">></span> <span class=\"token keyword\">get</span> database <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_database <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">databaseInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    _database <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">databaseInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">return</span> _database<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>  \n  \n  Future<span class=\"token operator\">&lt;</span>Database<span class=\"token operator\">></span> <span class=\"token function\">databaseInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>  \n    Directory dir <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getApplicationDocumentsDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    String path <span class=\"token operator\">=</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"app_database.db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">openDatabase</span><span class=\"token punctuation\">(</span>  \n      path<span class=\"token punctuation\">,</span>  \n      version<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  \n      onCreate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CREATE TABLE IF NOT EXISTS `students` ( `id` INTEGER PRIMARY KEY AUTOINCREMENT, `first_name` TEXT, `last_name` TEXT, `grade` INT)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n      <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Zauważ, że powyższy kod nie zadziała nam jeżeli nie dodamy odpowiednich pakietów. </p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string\">'package:sqflite/sqflite.dart'</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// Database, openDatabase()</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'package:path/path.dart'</span><span class=\"token punctuation\">;</span>  \t            <span class=\"token comment\">// join()</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'package:path_provider/path_provider.dart'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// getApplicationDocumentsDirectory()</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'dart:io'</span><span class=\"token punctuation\">;</span> \t\t\t\t    <span class=\"token comment\">// Diretory</span></code></pre></div>\n<hr>\n<h3 id=\"-krok-5-crud\"><a href=\"#-krok-5-crud\" aria-label=\" krok 5 crud permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚀 Krok 5. CRUD</h3>\n<p>Stworzymy teraz funkcje do tworzenia, pobierania, aktualizowania i usuwania studentów. Należy też dodać model <code class=\"language-text\">Student</code> do naszego pliku <code class=\"language-text\">database.dart</code> .</p>\n<ol>\n<li>Pobieranie studentów lub studenta po id</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">'models/StudentModel.dart'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DatabaseProvider</span> <span class=\"token punctuation\">{</span> \n\n<span class=\"token comment\">// ...</span>\n\n  Future<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>Student<span class=\"token operator\">>></span> <span class=\"token function\">getAllStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">final</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> database<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">var</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'students'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    List<span class=\"token operator\">&lt;</span>Student<span class=\"token operator\">></span> list <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>  \n      <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> Student<span class=\"token punctuation\">.</span><span class=\"token function\">fromMap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n  \n  Future<span class=\"token operator\">&lt;</span>Student<span class=\"token operator\">></span> <span class=\"token function\">getStudentById</span><span class=\"token punctuation\">(</span>int id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">final</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> database<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">var</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>  \n      <span class=\"token string\">'students'</span><span class=\"token punctuation\">,</span>  \n      where<span class=\"token punctuation\">:</span> <span class=\"token string\">\"id = ?\"</span><span class=\"token punctuation\">,</span>  \n      whereArgs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>  \n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>isEmpty <span class=\"token operator\">?</span> Student<span class=\"token punctuation\">.</span><span class=\"token function\">fromMap</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<ol start=\"2\">\n<li>Tworzenie studenta</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// ...</span>\n\n  Future<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span> <span class=\"token function\">addStudent</span><span class=\"token punctuation\">(</span>Student student<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">final</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> database<span class=\"token punctuation\">;</span>  \n    int id <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>  \n      <span class=\"token string\">'students'</span><span class=\"token punctuation\">,</span>  \n      student<span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n      conflictAlgorithm<span class=\"token punctuation\">:</span> ConflictAlgorithm<span class=\"token punctuation\">.</span>replace  \n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<ol start=\"3\">\n<li>Usuwanie studentów lub studenta po id</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">deleteAllStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">final</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> database<span class=\"token punctuation\">;</span>  \n    db<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"students\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n  \n  <span class=\"token function\">deleteStudent</span><span class=\"token punctuation\">(</span>int id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">final</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> database<span class=\"token punctuation\">;</span>  \n    db<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"students\"</span><span class=\"token punctuation\">,</span> where<span class=\"token punctuation\">:</span> <span class=\"token string\">\"id = ?\"</span><span class=\"token punctuation\">,</span> whereArgs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<ol start=\"4\">\n<li>Aktualizowanie studenta po id</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// ...</span>\n\n  Future<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span> <span class=\"token function\">updateStudent</span><span class=\"token punctuation\">(</span>Student student<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">final</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> database<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>  \n      <span class=\"token string\">\"students\"</span><span class=\"token punctuation\">,</span>   \n      student<span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n      where<span class=\"token punctuation\">:</span> <span class=\"token string\">\"id = ?\"</span><span class=\"token punctuation\">,</span>   \n      whereArgs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>student<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span>  \n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3 id=\"-krok-6-ui\"><a href=\"#-krok-6-ui\" aria-label=\" krok 6 ui permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌟 Krok 6. UI</h3>\n<p>Nasze bazodanowe API w postaci <code class=\"language-text\">DatabaseProvider</code>  jest już gotowe. Pora wykorzystać je w praktyce!\nPrzejdźmy do pliku <code class=\"language-text\">main.dart</code>. Stwórzmy <code class=\"language-text\">Stateful Widget</code>, który będzie przechowywał listę naszych studentów, zmienną <code class=\"language-text\">isLoading</code> informującą czy dane są pobierane oraz metodę <code class=\"language-text\">fetchStudents</code>, która będzie pobierała naszych studentów. </p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">runApp</span><span class=\"token punctuation\">(</span><span class=\"token function\">MaterialApp</span><span class=\"token punctuation\">(</span>home<span class=\"token punctuation\">:</span> <span class=\"token function\">HomePage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HomePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatefulWidget</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token metadata symbol\">@override</span>  \n  _HomePageState <span class=\"token function\">createState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">_HomePageState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_HomePageState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&lt;</span>HomePage<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>  \n  bool isLoading<span class=\"token punctuation\">;</span>  \n  List<span class=\"token operator\">&lt;</span>StudentDriver<span class=\"token operator\">></span> studentsList<span class=\"token punctuation\">;</span>  \n  \n  <span class=\"token metadata symbol\">@override</span>  \n  <span class=\"token keyword\">void</span> <span class=\"token function\">initState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">initState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">fetchStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n  \n <span class=\"token comment\">//...</span>\n  \n  <span class=\"token keyword\">void</span> <span class=\"token function\">fetchStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">final</span> tmpList <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> DatabaseProvider<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">getAllStudentDrivers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n      isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  \n      studentsList <span class=\"token operator\">=</span> tmpList<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Struktura Widgetów naszej aplikacji będzie wyglądała następująco. </p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>  <span class=\"token function\">Scaffold</span><span class=\"token punctuation\">(</span>\n      appBar<span class=\"token punctuation\">:</span> <span class=\"token function\">AppBar</span><span class=\"token punctuation\">(</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token function\">Center</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">:</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SQLite Demo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token punctuation\">:</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n          <span class=\"token function\">form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Wykorzystamy prostą funkcję <code class=\"language-text\">split</code> do dzielenia ciągu znaków na dwa pola - imię i nazwisko. Ocena będzie wartością losowaną - od 1 do 5. Aby korzystać z wartości losowych, musimy dodać w nagłówku naszego pliku linijkę</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string\">'dart:math'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Implementacja formularza. </p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">  <span class=\"token keyword\">final</span> textController <span class=\"token operator\">=</span> <span class=\"token function\">TextEditingController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">final</span> formKey <span class=\"token operator\">=</span> GlobalKey<span class=\"token operator\">&lt;</span>FormState<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span>\n      key<span class=\"token punctuation\">:</span> formKey<span class=\"token punctuation\">,</span>\n      child<span class=\"token punctuation\">:</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n          <span class=\"token function\">Padding</span><span class=\"token punctuation\">(</span>\n            padding<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> EdgeInsets<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token number\">15.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            child<span class=\"token punctuation\">:</span> <span class=\"token function\">TextFormField</span><span class=\"token punctuation\">(</span>\n              decoration<span class=\"token punctuation\">:</span> <span class=\"token function\">InputDecoration</span><span class=\"token punctuation\">(</span>\n                labelText<span class=\"token punctuation\">:</span> <span class=\"token string\">'Enter student full name'</span>\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              controller<span class=\"token punctuation\">:</span> textController<span class=\"token punctuation\">,</span>\n              validator<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n              value<span class=\"token punctuation\">.</span>isEmpty <span class=\"token operator\">?</span> <span class=\"token string\">\"Field is empty\"</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">ElevatedButton</span><span class=\"token punctuation\">(</span>\n            onPressed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">final</span> words <span class=\"token operator\">=</span> textController<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>formKey<span class=\"token punctuation\">.</span>currentState<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">await</span> DatabaseProvider<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">addStudent</span><span class=\"token punctuation\">(</span>\n                  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>\n                    firstName<span class=\"token punctuation\">:</span> words<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    lastName<span class=\"token punctuation\">:</span> words<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    grade<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">fetchStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                textController<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            child<span class=\"token punctuation\">:</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Add Student\"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Implementacja listy studentów.</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Expanded</span><span class=\"token punctuation\">(</span>\n      child<span class=\"token punctuation\">:</span> isLoading\n        <span class=\"token operator\">?</span> <span class=\"token function\">Center</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">:</span> <span class=\"token function\">CircularProgressIndicator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span> ListView<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>\n          scrollDirection<span class=\"token punctuation\">:</span> Axis<span class=\"token punctuation\">.</span>vertical<span class=\"token punctuation\">,</span>\n          itemCount<span class=\"token punctuation\">:</span> students<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n          itemBuilder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">final</span> student <span class=\"token operator\">=</span> students<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">Dismissible</span><span class=\"token punctuation\">(</span>\n              background<span class=\"token punctuation\">:</span> <span class=\"token function\">Container</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> Colors<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              key<span class=\"token punctuation\">:</span> <span class=\"token function\">Key</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              onDismissed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">await</span> DatabaseProvider<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">deleteStudent</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">fetchStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              child<span class=\"token punctuation\">:</span> <span class=\"token function\">ListTile</span><span class=\"token punctuation\">(</span>\n                title<span class=\"token punctuation\">:</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${student.firstName} ${student.lastName}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                subtitle<span class=\"token punctuation\">:</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id: ${student.id} grade: ${student.grade}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3 id=\"--efekt-końcowy\"><a href=\"#--efekt-ko%C5%84cowy\" aria-label=\"  efekt końcowy permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👏  Efekt końcowy</h3>\n<img src=\"https://i.ibb.co/hsj3mV6/ezgif-6-5488300e3db8.gif\" width=\"300\">\n<hr>\n<h3 id=\"-podsumowanie\"><a href=\"#-podsumowanie\" aria-label=\" podsumowanie permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💬 Podsumowanie</h3>\n<p>Zapoznałeś się z obsługą <code class=\"language-text\">sqlfite</code>. Teraz jesteś w stanie budować aplikacje zapamiętujące dane. To otwiera przed Tobą pełnie możliwości. Co dalej? Zachęcam do rozbudowania powyższej aplikacji (walidacja danych, kolejne pole formularza, aktualizowanie studenta) oraz zapoznania się z <a href=\"https://pub.dev/packages/floor\">floor</a>.\nDziękuję za przeczytanie tego artykułu i życzę Ci powodzenia w dalszym rozwijaniu się. </p>\n<p>- Tobiasz Ciesielski <a href=\"https://github.com/tobiaszciesielski\">tobiaszciesielski</a></p>\n<blockquote>\n<p>Jeśli masz jakieś uwagi lub sugestie podeślij nam je na adres <a href=\"mailto:kontakt@akai.org.pl\">kontakt@akai.org.pl</a> lub kontrybuuj do naszego <a href=\"https://github.com/akai-org/blog\">repozytorium</a>.</p>\n</blockquote>","fields":{"slug":"/posts/sqlite-flutter/","tagSlugs":["/tag/sqlite/","/tag/flutter/","/tag/mobile/"]},"frontmatter":{"date":"2020-11-07T20:28:00.169Z","description":"Tworzenie bazodanowej aplikacji mobilnej krok po kroku z użyciem flutter i SQLite","tags":["sqlite","flutter","mobile"],"title":"SQLite i flutter - z czym to się je."}}},"pageContext":{"slug":"/posts/sqlite-flutter/"}}}